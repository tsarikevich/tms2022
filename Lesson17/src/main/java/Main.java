import org.apache.commons.lang3.StringUtils;

import java.util.*;
import java.util.stream.Collectors;

/**
 * 6) Пишем библиотеку.
 * Для каждой книги библиотечного фонда известны автор, название и год издания.
 * Для читателя библиотеки будем хранить ФИО и электронный адрес. Каждый читатель может взять в библиотеке одну или несколько книг.
 * Ещё нам понадобится флаг читательского согласия на уведомления по электронной почте.
 * Рассылки организуют сотрудники библиотеки: напоминают о сроке возврата книг, сообщают новости.
 * Создаем классы:
 * - Book с полями Автор, Название, Год издания
 * - Reader(читатель) с полями ФИО, электронный адрес, флаг согласия на рассылку, список взятых книг
 * - EmailAddress  с полями электронный адрес, дополнительная информация
 * - Library содержит список книг и список читателей.
 * <p>
 * Задачи:
 * a) Получить список всех книг библиотеки, отсортированных по году издания.
 * b) Требуется создать список рассылки (объекты типа EmailAddress) из адресов всех читателей библиотеки.
 * При этом флаг согласия на рассылку учитывать не будем: библиотека закрывается, так что хотим оповестить всех.
 * c) Снова нужно получить список рассылки. Но на этот раз включаем в него только адреса читателей, которые согласились на рассылку.
 * Дополнительно нужно проверить, что читатель взял из библиотеки больше одной книги.
 * d) Получить список всех книг, взятых читателями.
 * Список не должен содержать дубликатов (книг одного автора, с одинаковым названием и годом издания).
 * e) Проверить, взял ли кто-то из читателей библиотеки какие-нибудь книги Пушкина Александра Сергеевича.
 * <p>
 * Задачи со ЗВЕЗДОЧКОЙ:
 * а) Узнать наибольшее число книг, которое сейчас на руках у читателя.
 * b) Необходимо рассылать разные тексты двум группам:
 * * тем, у кого взято меньше двух книг, просто расскажем о новинках библиотеки;
 * * тем, у кого две книги и больше, напомним о том, что их нужно вернуть в срок.
 * То есть надо написать метод, который вернёт два списка адресов (типа EmailAddress): с пометкой OK — если книг не больше двух,
 * или TOO_MUCH — если их две и больше. Порядок групп не важен.
 * с) Для каждой группы (OK, TOO_MUCH) получить списки читателей в каждой группе.
 * d) Для каждой группы (OK, TOO_MUCH) получить ФИО читателей в каждой группе, перечисленные через запятую.
 * И ещё каждый такой список ФИО нужно обернуть фигурными скобками.
 * Пример: TOO_MUCH {Иванов Иван Иванович, Васильев Василий Васильевич}
 * OK {Семёнов Семён Семёнович}
 */

public class Main {
    public static void main(String[] args) {
/** Все задачи необходимо решать используя Stream API и выводить результат на консоль !!!
 1) Вывести список чисел, умноженных на 2. Список чисел задаем рандомно.
 */
        List<Integer> list1 = randomIntsGenerator();
//        System.out.println(list1);
        list1 = list1.stream().map(a -> a * 2).collect(Collectors.toList());
//        System.out.println(list1);

/** 2) Определение количества четных чисел в потоке данных.
 * Создаем коллекцию Set<Integer> в которую добавляем рандомно 50 чисел от 0 до 100
 */
        Set<Integer> set1 = new HashSet<>(randomIntsGenerator());
//        System.out.println(set1);
        set1 = set1.stream().filter(a -> a % 2 == 0).collect(Collectors.toSet());
//        System.out.println("Количество четных чисел в потоке данных - " + set1.stream().count());

/** 3) Вывести список имен, но с первой заглавной буквой. список имен: "john", "arya", "sansa"
 */
        List<String> names = Arrays.asList("john", "arya", "sansa");
        names.stream().map(StringUtils::capitalize).forEach(System.out::println);

/** 4) Создаем класс Car с полями number (номер авто) и year (год выпуска).
 * List<Car> cars = Arrays.asList(
 *             new Car("AA1111BX", 2007),
 *             new Car("AK5555IT", 2010),
 *             new Car(null, 2012),
 *             new Car("", 2015),
 *             new Car("AI3838PP", 2017));
 *
 * Необходимо вывести все не пустые номера машин, выпущенных после 2010 года
 */

        List<Car> cars = Arrays.asList(
                new Car("AA1111BX", 2007),
                new Car("AK5555IT", 2010),
                new Car(null, 2012),
                new Car("", 2015),
                new Car("AI3838PP", 2017));

        cars.stream()
                .filter(c -> c.getYear() > 2010)
                .map(Car::getNumber)
                .filter(s -> s != null && !s.isEmpty())
                .forEach(System.out::println);

/**
 * 5) Задан список сотрудников, которые хранятся в коллекции List<p3.Person>.
 * Объект p3.Person содержит имя и фамилию(по желанию другие данные)
 * a) написать метод, который отображает все фамилии, начинающиеся на букву "Д".
 * Внимание! метод должен вернуть объект Optional<String>.
 * b*)Со звездочкой. Написать метод, который будет выводить в столбик первую букву фамилии и рядом количество сотрудников,
 * у которых фамилия начинается с этой буквы.
 * Пример: Антонов, Петров, Сидоров, Александров...
 * на экран выведет:
 * A - 2 сотрудника
 * П - 1 сотрудник
 * С - 1 сотрудник
 */

    }

    private static List<Integer> randomIntsGenerator() {
        return new Random().ints(50, 0, 101).boxed().collect(Collectors.toList());
    }
}
